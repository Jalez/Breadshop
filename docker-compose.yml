# @format

# This is the docker-compose-yml file that must be able to start
# your group's backend.

# Remember to comment this file well!

# After you have Docker and Docker Compose installed,
# and this file is ready, you use this file and run it with:
# `docker-compose up --build`

version: '3.8'

services:
  # An example configuration of server A for groups' convenience.
  # server-a is based on the Docker image the groups produce and build themselves.
  server-a:
    # Change the image information to match your server A image
    image: larg/server-a:v0.4 # $USERNAME/$IMAGENAME:$TAG, something like group000/node-swagger:3a
    # 'depends_on' and 'command' are  to be used when used
    # with RabbitMQ service in this file. 'depends_on' must be set
    # to RabbitMQ service's name from this file, and 'command'
    # can be modified to be anything, but what is given should
    # work. Just uncomment them
    depends_on:
      - rapid-runner-rabbit
      - mongodb
    # command:
    #   [
    #     './utils/wait-for-it.sh',
    #     'rapid-runner-rabbit:5672',
    #     '--',
    #     'npm',
    #     'start',
    #   ]
    command: bash -c "/usr/wait-for-it.sh --timeout=0 rapid-runner-rabbit:5672 && npm start"
    build:
      dockerfile: Dockerfile
      context: ./backend/server-a
    # Here we map the port 8080 of the container to the
    # port 12345 of the host. Container port has been exposed
    # in the node:10 Docker Hub Dockerfile.
    ports:
      - '12345:8080'
    networks:
      - backend

  # rabbitmq:3-management Docker Hub image.
  rapid-runner-rabbit:
    # image: rabbitmq:3-management
    build: ./backend/rabbitmq
    hostname: rabbitmq
    # For management, visit http://localhost:15672
    # (username: guest, password: guest)
    ports:
      - '15672:15672'
    expose:
      - '5672'
    networks:
      - backend

  # much of the server-b service entry can be copied from server-a
  # service above. server-b directory Dockerfile has more
  # information.
  # A set of needed Docker instructions like 'image:' are shown
  # below, groups should set their values. Groups are free to
  # CRUD this set of instructions as they see fit.
  server-b:
    image: larg/server-b:v0.4
    depends_on:
      - rapid-runner-rabbit
    # command:
    #   [
    #     './utils/wait-for-it.sh',
    #     'rapid-runner-rabbit:5672',
    #     '--',
    #     'node',
    #     'index.js',
    #   ]
    command: bash -c "/usr/wait-for-it.sh --timeout=0 rapid-runner-rabbit:5672 && node index.js"
    networks:
      - backend
    expose:
      - '8080'

  # Your group might want to use a database to store some data
  # You can use any database you wish, PostgreSQL, MySQL and
  # MongoDB have rather good Docker documentation and examples.
  # But some groups could find a way to do this without
  # databases (but I could not :-) )
  # database-service would go here.

  # Note: one can inspect the database by doing:
  #   sudo docker exec -it mongodb bash
  #   mongo
  # then doing mongo shell commands as per usual.
  #   show databases
  #   use <db>
  #   show collections
  #   <db>.<cltn>.find().pretty()
  mongodb:
    image: mongo
    container_name: mongodb
    environment:
    - MONGO_INITDB_ROOT_USERNAME=root
    - MONGO_INITDB_ROOT_PASSWORD=pass
    volumes:
    - mongodb-data:/data/db
    ports:
    - 27017:27017
    networks:
    - backend
    restart: unless-stopped
    
  mongo-express:
    image: mongo-express
    container_name: mongo-express
    environment:
    - ME_CONFIG_MONGODB_SERVER=mongodb
    - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
    - ME_CONFIG_MONGODB_ADMINUSERNAME=root
    - ME_CONFIG_MONGODB_ADMINPASSWORD=pass
    - ME_CONFIG_BASICAUTH_USERNAME=admin
    - ME_CONFIG_BASICAUTH_PASSWORD=admin
    volumes:
    - mongodb-data
    depends_on:
    - mongodb
    networks:
    - backend
    ports:
    - 8081:8081
    restart: unless-stopped
    networks:
    - backend

# Here we create a named network, that all the backend components
# must be added to for them to be able to communicate through
# exposed ports.
networks:
  backend:
    driver: bridge
# If you use databases for storing information, you can define
# their volumes here.
# Documentation: https://docs.docker.com/storage/volumes/
# Personally I like to look at the database's image's Dockerfile
# in the Docker Hub to see what directory it uses to store data.
# volumes:

volumes:
  mongodb-data: